y
# Gerando uma distribuição normal
y1 <- y + rnorm(101, 0, 50)
y1
hist(y1)
?rnorm
# Crie um plot do relacionamento de x e y1
library(ggplot2)
?ggplot
sample <- data.frame(c(x, y, y1))
View(sample)
sample <- data.frame(x, y, y1)
View(sample)
library(hrbrthemes)
install.packages('hrbrthemes')
library(hrbrthemes)
ggplot(sample, aes(x = x, y = y1)) + geom_point() + geom_smooth(method=lm , color="red", fill="#69b3a2", se=TRUE) +
theme_ipsum()
?lm
# Crie um modelo de regressão para as duas variáveis x e y1
modelo <- lm(x~y, sample)
# Capture os coeficentes
summary(modelo)
# Visualize a linha de regressão
plot(x, y1, sample, main = 'Gráfico de Dispersão', xlab = 'X', ylab = 'Y')
# Visualize a linha de regressão
plot(x, y1, main = 'Gráfico de Dispersão', xlab = 'X', ylab = 'Y')
abline(modelo, col ='red')
# Simulando outras possíveis linhas de regressão
y3 <- (y2[51]-50*(b-1))+(b-1)*x
y2 <- a + b*x
# Simulando outras possíveis linhas de regressão
y3 <- (y1[51]-50*(b-1))+(b-1)*x
coeficientes <- coef(modelo)
# Crie um modelo de regressão para as duas variáveis x e y1
modelo <- lm(y ~ x, sample)
# Capture os coeficentes
summary(modelo)
# Crie um modelo de regressão para as duas variáveis x e y1
modelo <- lm(y ~ x + y1, sample)
# Capture os coeficentes
summary(modelo)
coeficientes <- coef(modelo)
y2 <- a + bx*x + by1*y1
# Fórmula de Regressão
a <- coeficientes[1]
bx <- coeficientes[2]
by1 <- coeficientes[3]
y2 <- a + bx*x + by1*y1
# Visualize a linha de regressão
plot(modelo, main = 'Gráfico de Dispersão', xlab = 'X', ylab = 'Y1')
# Visualize a linha de regressão
plot(modelo, main = 'Gráfico de Dispersão', xlab = 'X', ylab = 'Y1')
abline(modelo, col ='red')
# Visualize a linha de regressão
par(mfrow = c(2, 2))
plot(modelo, main = 'Gráfico de Dispersão')
ggplot(sample, aes(x = x, y = y1)) + geom_point()
# Criando a massa de dados (apesar de aleatória, y possui
# uma relação com os dados de x)
x <- seq(0, 100)
function (x, size, replace = FALSE, prob = NULL)
y <- 2 * x + 35
y <- 2 * x + 35
# Imprimindo as variáveis
x
y
?seq
# Gerando uma distribuição normal
y1 <- y + rnorm(101, 0, 50)
y1
setwd("D:/Data Science/Projetos/R com Azure")
getwd()
# Objetivo do mini-projeto: construir um modelo de Machine Learning
# capaz de prever o consumo de energia de carros elétricos
# Import
library(readxl)
library(dplyr)
library(ggplot2)
library(hrbrthemes)
library(corrplot)
library(randomForest)
library(ggpubr)
library(caTools)
dados <- read_excel('FEV-data-Excel.xlsx')
# Dimensões
dim(dados)
#visualizando os dados
View(dados)
# Variáveis e Tipos de Dados
str(dados)
# Sumários das variáveis numéricas
summary(dados)
################## Analise exploratória de dados ####################
# Nomes das colunas
colnames(dados)
# Criando o cabeçalho
cabecalho <- c('Carro', 'Montadora', 'Modelo', 'Preco_minimo', 'Motor', 'Torque', 'Freio', 'Tracao',
'Capacidade_bateria', 'Distancia_maxima', 'Distancia_eixo', 'Comprimento', 'Largura',
'Altura', 'Peso', 'Peso_admissivel', 'Carregamento_maximo', 'Bancos', 'Portas',
'Pneu', 'Velocidade_maxima', 'Partida', 'Aceleracao', 'Potencia_bateria','Media_consumo_energia' )
cabecalho
# Renomeando o cabeçalho no dataframe
colnames(dados) <- cabecalho
colnames(dados)
rm(cabecalho)
# Visualiza os dados
View(dados)
# Verificando valores únicos em cada coluna
unique_counts <- sapply(dados, function(col) length(unique(col)))
print(unique_counts)
rm(unique_counts)
# Alterando os tipos de variáveis
# Variáveis para conversão
Var_cat <- c('Carro', 'Montadora', 'Modelo', 'Freio', 'Tracao', 'Bancos', 'Portas', 'Pneu')
# Convertendo no dataframe
dados[, Var_cat] <- lapply(dados[, Var_cat], factor)
# Variáveis e Tipos de Dados
str(dados)
# Sumário dos dados
summary(dados)
# Verificando a quantidade de campos vazios
# Quantas linhas tem casos completos?
complete_cases <- sum(complete.cases(dados))
# Quantas linhas tem casos incompletos?
not_complete_cases <- sum(!complete.cases(dados))
# Qual o percentual de dados incompletos?
percentual <- (not_complete_cases / complete_cases) * 100
percentual
rm(complete_cases)
rm(not_complete_cases)
rm(percentual)
# Verificando os carros que foram excluídos devido a falta de informação
carros <- dados$Carro
subset <- na.omit(dados)
carros_sem_na <- subset$Carro
setdiff(carros, carros_sem_na)
rm(carros)
rm(carros_sem_na)
subset_num <- subset(subset, select = sapply(subset, is.numeric))
correlacao <- cor(subset_num)
corrplot(correlacao, method = 'color')
preco_minimo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Preco_minimo)) + labs_pubr() +
theme_pubclean()
motor <- ggplot(data = subset_num) + geom_boxplot(aes(y = Motor)) + labs_pubr() +
theme_pubclean()
Torque <- ggplot(data = subset_num) + geom_boxplot(aes(y = Torque)) + labs_pubr() +
theme_pubclean()
capacidade_bateria <- ggplot(data = subset_num) + geom_boxplot(aes(y = Capacidade_bateria)) + labs_pubr() +
theme_pubclean()
distancia_maxima <- ggplot(data = subset_num) + geom_boxplot(aes(y = Distancia_maxima)) + labs_pubr() +
theme_pubclean()
distancia_eixo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Distancia_eixo)) + labs_pubr() +
theme_pubclean()
comprimento <- ggplot(data = subset_num) + geom_boxplot(aes(y = Comprimento)) + labs_pubr() +
theme_pubclean()
largura <- ggplot(data = subset_num) + geom_boxplot(aes(y = Largura)) + labs_pubr() +
theme_pubclean()
altura <- ggplot(data = subset_num) + geom_boxplot(aes(y = Altura)) + labs_pubr() +
theme_pubclean()
peso <- ggplot(data = subset_num) + geom_boxplot(aes(y = Peso)) + labs_pubr() +
theme_pubclean()
peso_maximo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Peso_admissivel)) + labs_pubr() +
theme_pubclean()
carregamento_maximo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Carregamento_maximo)) + labs_pubr() +
theme_pubclean()
Partida <- ggplot(data = subset_num) + geom_boxplot(aes(y = Partida)) + labs_pubr() +
theme_pubclean()
Velocidade_maxima <- ggplot(data = subset_num) + geom_boxplot(aes(y = Velocidade_maxima)) + labs_pubr() +
theme_pubclean()
aceleracao <- ggplot(data = subset_num) + geom_boxplot(aes(y = Aceleracao)) + labs_pubr() +
theme_pubclean()
Potencia <- ggplot(data = subset_num) + geom_boxplot(aes(y = Potencia_bateria)) + labs_pubr() +
theme_pubclean()
Media <- ggplot(data = subset_num) + geom_boxplot(aes(y = Media_consumo_energia)) + labs_pubr() +
theme_pubclean()
ggarrange(ncol = 4, nrow = 3, preco_minimo, motor, Torque, capacidade_bateria, distancia_maxima, distancia_eixo,
comprimento, largura, altura, peso, peso_maximo, carregamento_maximo, Partida, Velocidade_maxima,
aceleracao, Potencia, Media)
# Verificando os histogramas
preco_minimo <- ggplot(data = subset_num) + geom_histogram(aes(Preco_minimo)) + labs_pubr() +
theme_pubclean()
motor <- ggplot(data = subset_num) + geom_histogram(aes(Motor)) + labs_pubr() +
theme_pubclean()
Torque <- ggplot(data = subset_num) + geom_histogram(aes(Torque)) + labs_pubr() +
theme_pubclean()
capacidade_bateria <- ggplot(data = subset_num) + geom_histogram(aes(Capacidade_bateria)) + labs_pubr() +
theme_pubclean()
distancia_maxima <- ggplot(data = subset_num) + geom_histogram(aes(Distancia_maxima)) + labs_pubr() +
theme_pubclean()
distancia_eixo <- ggplot(data = subset_num) + geom_histogram(aes(Distancia_eixo)) + labs_pubr() +
theme_pubclean()
comprimento <- ggplot(data = subset_num) + geom_histogram(aes(Comprimento)) + labs_pubr() +
theme_pubclean()
largura <- ggplot(data = subset_num) + geom_histogram(aes(Largura)) + labs_pubr() +
theme_pubclean()
altura <- ggplot(data = subset_num) + geom_histogram(aes(Altura)) + labs_pubr() +
theme_pubclean()
peso <- ggplot(data = subset_num) + geom_histogram(aes(Peso)) + labs_pubr() +
theme_pubclean()
peso_maximo <- ggplot(data = subset_num) + geom_histogram(aes(Peso_admissivel)) + labs_pubr() +
theme_pubclean()
carregamento_maximo <- ggplot(data = subset_num) + geom_histogram(aes(Carregamento_maximo)) + labs_pubr() +
theme_pubclean()
Partida <- ggplot(data = subset_num) + geom_histogram(aes(Partida)) + labs_pubr() +
theme_pubclean()
Velocidade_maxima <- ggplot(data = subset_num) + geom_histogram(aes(Velocidade_maxima)) + labs_pubr() +
theme_pubclean()
aceleracao <- ggplot(data = subset_num) + geom_histogram(aes(Aceleracao)) + labs_pubr() +
theme_pubclean()
Potencia <- ggplot(data = subset_num) + geom_histogram(aes(Potencia_bateria)) + labs_pubr() +
theme_pubclean()
Media <- ggplot(data = subset_num) + geom_histogram(aes(Media_consumo_energia)) + labs_pubr() +
theme_pubclean()
ggarrange(ncol = 4, nrow = 3, preco_minimo, motor, Torque, capacidade_bateria, distancia_maxima, distancia_eixo,
comprimento, largura, altura, peso, peso_maximo, carregamento_maximo, Partida, Velocidade_maxima,
aceleracao, Potencia, Media)
# Normalizando os dados para a regressão
subset_norm <- as.data.frame(scale(subset_num))
modelo <- randomForest( Media_consumo_energia ~ .,
data = subset_norm,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo)
modelo <- randomForest( Media_consumo_energia ~ .,
data = subset_norm,
ntree = 100, nodesize = 10, importance = F)
varImpPlot(modelo)
summary(modelo)
# Dividindo o dataset em treino e teste
# Criando uma amostra randomica
amostra <- sample.split(subset_norm, SplitRatio = 0.70)
# Criando o dataset de treino
treino = subset(subset_norm, amostra == TRUE)
# Criando dados de teste
teste = subset(subset_norm, amostra == FALSE)
# Gerando os modelos
modelo_v1 <- lm(Media_consumo_energia ~ ., subset_norm)
modelo_v2 <- lm(Media_consumo_energia ~ Distancia_eixo + Peso_admissivel + Comprimento + Largura, subset_norm)
modelo_v3 <- lm(Media_consumo_energia ~ Motor + Peso_admissivel + Torque, subset_norm)
modelo_v4 <- lm(Media_consumo_energia ~ . - Altura - Distancia_maxima, subset_norm)
modelo_v5 <- lm(Media_consumo_energia ~ . - Altura, subset_norm)
modelo_v6 <- lm(Media_consumo_energia ~ Distancia_maxima + Capacidade_bateria, subset_norm)
# Interpretando os modelos
summary(modelo_v1) #0.9545
summary(modelo_v2) #0.794
summary(modelo_v3) #0.8096
summary(modelo_v4) #0.9068
summary(modelo_v5) #0.9545
summary(modelo_v6) #0.907
library(rpart)
modelo_rf_v1 = rpart(Media_consumo_energia ~ ., data = subset_norm, control = rpart.control(cp = .0005))
summary(modelo_rf_v1)
# Obtendo os resíduos
res <- residuals(modelo_v5)
# Convertendo o objeto para um dataframe
res <- as.data.frame(res)
head(res)
# Histograma dos resíduos
ggplot(res, aes(res)) +
geom_histogram(fill = 'blue',
alpha = 0.5,
binwidth = 1)
# Plot do Modelo
par(mfrow = c(2, 2))
plot(modelo_v5)
# Fazendo as predições
prevendo_consumo <- predict(modelo_v5, teste)
prevendo_consumo
# Visualizando os valores previstos e observados
resultados <- cbind(prevendo_consumo, teste$Media_consumo_energia)
colnames(resultados) <- c('Previsto','Real')
resultados <- as.data.frame(resultados)
resultados
# Calculando o erro médio
# Quão distantes seus valores previstos estão dos valores observados
# MSE
mse <- mean((resultados$Real - resultados$Previsto)^2)
print(mse)
# RMSE
rmse <- mse^0.5
rmse
# Calculando R Squared
SSE = sum((resultados$Previsto - resultados$Real)^2)
SST = sum((mean(subset_norm$Media_consumo_energia) - resultados$Real)^2)
# R-Squared
# Ajuda a avaliar o nível de precisão do nosso modelo. Quanto maior, melhor, sendo 1 o valor ideal.
R2 = 1 - (SSE/SST)
R2
# Retornando a escala original
previsoes_original <- prevendo_consumo * sd(subset_num$Media_consumo_energia) + mean(subset_num$Media_consumo_energia)
previsoes_original
resultados <- as.data.frame(resultados)
resultados <- as.data.frame(resultados)
# Definindo o diretório de trabalho
setwd("D:/Data Science/Projetos/R com Azure")
getwd()
# Objetivo do mini-projeto: construir um modelo de Machine Learning
# capaz de prever o consumo de energia de carros elétricos
# Import
library(readxl)
library(dplyr)
library(ggplot2)
library(hrbrthemes)
library(corrplot)
library(randomForest)
library(ggpubr)
library(caTools)
# Carregando o dataset, disponível em: https://data.world/laurel/world-happiness-report-data
dados <- read_excel('FEV-data-Excel.xlsx')
# Dimensões
dim(dados)
#visualizando os dados
View(dados)
# Variáveis e Tipos de Dados
str(dados)
# Sumários das variáveis numéricas
summary(dados)
################## Analise exploratória de dados ####################
# Nomes das colunas
colnames(dados)
# Criando o cabeçalho
cabecalho <- c('Carro', 'Montadora', 'Modelo', 'Preco_minimo', 'Motor', 'Torque', 'Freio', 'Tracao',
'Capacidade_bateria', 'Distancia_maxima', 'Distancia_eixo', 'Comprimento', 'Largura',
'Altura', 'Peso', 'Peso_admissivel', 'Carregamento_maximo', 'Bancos', 'Portas',
'Pneu', 'Velocidade_maxima', 'Partida', 'Aceleracao', 'Potencia_bateria','Media_consumo_energia' )
cabecalho
# Renomeando o cabeçalho no dataframe
colnames(dados) <- cabecalho
colnames(dados)
rm(cabecalho)
# Visualiza os dados
View(dados)
# Verificando valores únicos em cada coluna
unique_counts <- sapply(dados, function(col) length(unique(col)))
print(unique_counts)
rm(unique_counts)
# Alterando os tipos de variáveis
# Variáveis para conversão
Var_cat <- c('Carro', 'Montadora', 'Modelo', 'Freio', 'Tracao', 'Bancos', 'Portas', 'Pneu')
# Convertendo no dataframe
dados[, Var_cat] <- lapply(dados[, Var_cat], factor)
# Variáveis e Tipos de Dados
str(dados)
# Sumário dos dados
summary(dados)
# Verificando a quantidade de campos vazios
# Quantas linhas tem casos completos?
complete_cases <- sum(complete.cases(dados))
# Quantas linhas tem casos incompletos?
not_complete_cases <- sum(!complete.cases(dados))
# Qual o percentual de dados incompletos?
percentual <- (not_complete_cases / complete_cases) * 100
percentual
rm(complete_cases)
rm(not_complete_cases)
rm(percentual)
# Verificando os carros que foram excluídos devido a falta de informação
carros <- dados$Carro
subset <- na.omit(dados)
carros_sem_na <- subset$Carro
setdiff(carros, carros_sem_na)
rm(carros)
rm(carros_sem_na)
# Verificando a correlação das variáveis númericas
# Selecionando as variáveis numéricas
subset_num <- subset(subset, select = sapply(subset, is.numeric))
correlacao <- cor(subset_num)
corrplot(correlacao, method = 'color')
# Verificando a dispersão dos dados
preco_minimo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Preco_minimo)) + labs_pubr() +
theme_pubclean()
motor <- ggplot(data = subset_num) + geom_boxplot(aes(y = Motor)) + labs_pubr() +
theme_pubclean()
Torque <- ggplot(data = subset_num) + geom_boxplot(aes(y = Torque)) + labs_pubr() +
theme_pubclean()
capacidade_bateria <- ggplot(data = subset_num) + geom_boxplot(aes(y = Capacidade_bateria)) + labs_pubr() +
theme_pubclean()
distancia_maxima <- ggplot(data = subset_num) + geom_boxplot(aes(y = Distancia_maxima)) + labs_pubr() +
theme_pubclean()
distancia_eixo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Distancia_eixo)) + labs_pubr() +
theme_pubclean()
comprimento <- ggplot(data = subset_num) + geom_boxplot(aes(y = Comprimento)) + labs_pubr() +
theme_pubclean()
largura <- ggplot(data = subset_num) + geom_boxplot(aes(y = Largura)) + labs_pubr() +
theme_pubclean()
altura <- ggplot(data = subset_num) + geom_boxplot(aes(y = Altura)) + labs_pubr() +
theme_pubclean()
peso <- ggplot(data = subset_num) + geom_boxplot(aes(y = Peso)) + labs_pubr() +
theme_pubclean()
peso_maximo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Peso_admissivel)) + labs_pubr() +
theme_pubclean()
carregamento_maximo <- ggplot(data = subset_num) + geom_boxplot(aes(y = Carregamento_maximo)) + labs_pubr() +
theme_pubclean()
Partida <- ggplot(data = subset_num) + geom_boxplot(aes(y = Partida)) + labs_pubr() +
theme_pubclean()
Velocidade_maxima <- ggplot(data = subset_num) + geom_boxplot(aes(y = Velocidade_maxima)) + labs_pubr() +
theme_pubclean()
aceleracao <- ggplot(data = subset_num) + geom_boxplot(aes(y = Aceleracao)) + labs_pubr() +
theme_pubclean()
Potencia <- ggplot(data = subset_num) + geom_boxplot(aes(y = Potencia_bateria)) + labs_pubr() +
theme_pubclean()
Media <- ggplot(data = subset_num) + geom_boxplot(aes(y = Media_consumo_energia)) + labs_pubr() +
theme_pubclean()
ggarrange(ncol = 4, nrow = 3, preco_minimo, motor, Torque, capacidade_bateria, distancia_maxima, distancia_eixo,
comprimento, largura, altura, peso, peso_maximo, carregamento_maximo, Partida, Velocidade_maxima,
aceleracao, Potencia, Media)
# Verificando os histogramas
preco_minimo <- ggplot(data = subset_num) + geom_histogram(aes(Preco_minimo)) + labs_pubr() +
theme_pubclean()
motor <- ggplot(data = subset_num) + geom_histogram(aes(Motor)) + labs_pubr() +
theme_pubclean()
Torque <- ggplot(data = subset_num) + geom_histogram(aes(Torque)) + labs_pubr() +
theme_pubclean()
capacidade_bateria <- ggplot(data = subset_num) + geom_histogram(aes(Capacidade_bateria)) + labs_pubr() +
theme_pubclean()
distancia_maxima <- ggplot(data = subset_num) + geom_histogram(aes(Distancia_maxima)) + labs_pubr() +
theme_pubclean()
distancia_eixo <- ggplot(data = subset_num) + geom_histogram(aes(Distancia_eixo)) + labs_pubr() +
theme_pubclean()
comprimento <- ggplot(data = subset_num) + geom_histogram(aes(Comprimento)) + labs_pubr() +
theme_pubclean()
largura <- ggplot(data = subset_num) + geom_histogram(aes(Largura)) + labs_pubr() +
theme_pubclean()
altura <- ggplot(data = subset_num) + geom_histogram(aes(Altura)) + labs_pubr() +
theme_pubclean()
peso <- ggplot(data = subset_num) + geom_histogram(aes(Peso)) + labs_pubr() +
theme_pubclean()
peso_maximo <- ggplot(data = subset_num) + geom_histogram(aes(Peso_admissivel)) + labs_pubr() +
theme_pubclean()
carregamento_maximo <- ggplot(data = subset_num) + geom_histogram(aes(Carregamento_maximo)) + labs_pubr() +
theme_pubclean()
Partida <- ggplot(data = subset_num) + geom_histogram(aes(Partida)) + labs_pubr() +
theme_pubclean()
Velocidade_maxima <- ggplot(data = subset_num) + geom_histogram(aes(Velocidade_maxima)) + labs_pubr() +
theme_pubclean()
aceleracao <- ggplot(data = subset_num) + geom_histogram(aes(Aceleracao)) + labs_pubr() +
theme_pubclean()
Potencia <- ggplot(data = subset_num) + geom_histogram(aes(Potencia_bateria)) + labs_pubr() +
theme_pubclean()
Media <- ggplot(data = subset_num) + geom_histogram(aes(Media_consumo_energia)) + labs_pubr() +
theme_pubclean()
ggarrange(ncol = 4, nrow = 3, preco_minimo, motor, Torque, capacidade_bateria, distancia_maxima, distancia_eixo,
comprimento, largura, altura, peso, peso_maximo, carregamento_maximo, Partida, Velocidade_maxima,
aceleracao, Potencia, Media)
# Normalizando os dados para a regressão
subset_norm <- as.data.frame(scale(subset_num))
# Usando o Random Forest para seleção de variáveis
modelo <- randomForest( Media_consumo_energia ~ .,
data = subset_norm,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo)
# Dividindo o dataset em treino e teste
# Criando uma amostra randomica
amostra <- sample.split(subset_norm, SplitRatio = 0.70)
# Criando o dataset de treino
treino = subset(subset_norm, amostra == TRUE)
# Criando dados de teste
teste = subset(subset_norm, amostra == FALSE)
# Gerando os modelos
modelo_v1 <- lm(Media_consumo_energia ~ ., subset_norm)
modelo_v2 <- lm(Media_consumo_energia ~ Distancia_eixo + Peso_admissivel + Comprimento + Largura, subset_norm)
modelo_v3 <- lm(Media_consumo_energia ~ Motor + Peso_admissivel + Torque, subset_norm)
modelo_v4 <- lm(Media_consumo_energia ~ . - Altura - Distancia_maxima, subset_norm)
modelo_v5 <- lm(Media_consumo_energia ~ . - Altura, subset_norm)
modelo_v6 <- lm(Media_consumo_energia ~ Distancia_maxima + Capacidade_bateria, subset_norm)
# Interpretando os modelos
summary(modelo_v1) #0.9545
summary(modelo_v2) #0.794
summary(modelo_v3) #0.8096
summary(modelo_v4) #0.9068
summary(modelo_v5) #0.9545
summary(modelo_v6) #0.907
# Visualizando o Modelo e Fazendo Previsões
# Obtendo os resíduos
res <- residuals(modelo_v5)
# Convertendo o objeto para um dataframe
res <- as.data.frame(res)
head(res)
# Histograma dos resíduos
ggplot(res, aes(res)) +
geom_histogram(fill = 'blue',
alpha = 0.5,
binwidth = 1)
# Plot do Modelo
par(mfrow = c(2, 2))
plot(modelo_v5)
# Fazendo as predições
prevendo_consumo <- predict(modelo_v5, teste)
prevendo_consumo
# Visualizando os valores previstos e observados
resultados <- cbind(prevendo_consumo, teste$Media_consumo_energia)
colnames(resultados) <- c('Previsto','Real')
resultados <- as.data.frame(resultados)
resultados
# Calculando o erro médio
# Quão distantes seus valores previstos estão dos valores observados
# MSE
mse <- mean((resultados$Real - resultados$Previsto)^2)
print(mse)
# RMSE
rmse <- mse^0.5
rmse
# Calculando R Squared
SSE = sum((resultados$Previsto - resultados$Real)^2)
SST = sum((mean(subset_norm$Media_consumo_energia) - resultados$Real)^2)
# R-Squared
# Ajuda a avaliar o nível de precisão do nosso modelo. Quanto maior, melhor, sendo 1 o valor ideal.
R2 = 1 - (SSE/SST)
R2
# Retornando a escala original
previsoes_original <- prevendo_consumo * sd(subset_num$Media_consumo_energia) + mean(subset_num$Media_consumo_energia)
previsoes_original
